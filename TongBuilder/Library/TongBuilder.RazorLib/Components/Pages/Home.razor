@page "/"
@using System.Diagnostics
@using TongBuilder.Contract.Contracts
@using static TongBuilder.RazorLib.Components.TongDialog
@attribute [Authorize]
@inject ICurrentUser CurrentUser

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!,@context.User.IsInRole("Admin")</p>
        <PageTitle>Basic Dialog</PageTitle>

        <TongDialog Title="Are you sure?" Buttons="@Buttons">
            <Body>
                Do you really want to delete this user?
            </Body>
        </TongDialog>
        <JobsContainer Jobs="Jobs" OnStatusUpdated="HandleStatusUpdated">
            <JobList ListStatus="JobStatuses.Todo" AllowedStatuses="@(new JobStatuses[] { JobStatuses.Started})" />
            <JobList ListStatus="JobStatuses.Started" AllowedStatuses="@(new JobStatuses[] { JobStatuses.Todo})" />
            <JobList ListStatus="JobStatuses.Completed" AllowedStatuses="@(new JobStatuses[] { JobStatuses.Started })" />
        </JobsContainer>

        <hr />
        <p>Last updated job was: <strong>@lastUpdatedJob</strong></p>
        <hr />

        @foreach (var task in Jobs)
        {
            <p>@task.Description - <strong>@task.Status</strong></p>
        }
    </Authorized>
    <Authorizing>
        <p>You can only see this content while authentication is in progress.</p>
    </Authorizing>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

<PageTitle>Home</PageTitle>


<h1>Hello, world!</h1>

<p>Welcome to @CurrentUser.NickName new app.</p>

@code {
    public IEnumerable<DialogButton> Buttons { get; set; } = new List<DialogButton>{
        new DialogButton("Delete", () =>
        {
            Debug.WriteLine("Delete");
        }),
        new DialogButton("Cancel", () =>
        {
            Debug.WriteLine("Cancel");
        })
    };
    List<JobModel> Jobs = new List<JobModel>();
    string lastUpdatedJob = "";

    protected override void OnInitialized()
    {
        Jobs.Add(new JobModel { Id = 1, Description = "Mow the lawn", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
        Jobs.Add(new JobModel { Id = 2, Description = "Go to the gym", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
        Jobs.Add(new JobModel { Id = 3, Description = "Call Ollie", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
        Jobs.Add(new JobModel { Id = 4, Description = "Fix bike tyre", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
        Jobs.Add(new JobModel { Id = 5, Description = "Finish blog post", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    }

    void HandleStatusUpdated(JobModel updatedJob)
    {
        lastUpdatedJob = updatedJob.Description;
    }
}
